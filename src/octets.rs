// Copyright 2021 Shin Yoshida
//
// "LGPL-3.0-or-later OR Apache-2.0 OR BSD-2-Clause"
//
// This is part of mouse-leveldb
//
//  mouse-leveldb is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  mouse-leveldb is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public License
//  along with mouse-leveldb.  If not, see <http://www.gnu.org/licenses/>.
//
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
// Redistribution and use in source and binary forms, with or without modification, are permitted
// provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of
//    conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice, this
//    list of conditions and the following disclaimer in the documentation and/or other
//    materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

use core::cmp::Ordering;
use core::hash::{Hash, Hasher};
use core::ops::{Deref, DerefMut};
use leveldb_sys::leveldb_free;
use std::borrow::{Borrow, BorrowMut};
use std::fmt;
use std::os::raw::c_void;

/// `Octets` is a wrapper of `&mut [u8]` generated by `leveldb_sys` .
///
/// User can access the wrapped value via the `Deref` and `DerefMut` implementation.
pub struct Octets {
    ptr_: Option<*mut u8>,
    len_: usize,
}

unsafe impl Send for Octets {}
unsafe impl Sync for Octets {}

impl Drop for Octets {
    fn drop(&mut self) {
        if let Some(ptr) = self.ptr_ {
            unsafe { leveldb_free(ptr as *mut c_void) };
        }
    }
}

/// Creates a new instance.
///
/// # Safety
///
/// `ptr` must be return value of `leveldb_sys::leveldb_get` .
#[inline]
pub unsafe fn new(ptr: *mut u8, len: usize) -> Octets {
    if ptr.is_null() {
        assert_eq!(0, len);
        Octets {
            ptr_: None,
            len_: len,
        }
    } else {
        Octets {
            ptr_: Some(ptr),
            len_: len,
        }
    }
}

impl PartialEq<Self> for Octets {
    #[inline]
    fn eq(&self, other: &Self) -> bool {
        let this: &[u8] = self.borrow();
        let other: &[u8] = other.borrow();
        this.eq(other)
    }
}

impl Eq for Octets {}

impl PartialOrd<Self> for Octets {
    #[inline]
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        let this: &[u8] = self.borrow();
        let other: &[u8] = other.borrow();
        this.partial_cmp(other)
    }
}

impl Ord for Octets {
    #[inline]
    fn cmp(&self, other: &Self) -> Ordering {
        let this: &[u8] = self.borrow();
        let other: &[u8] = other.borrow();
        this.cmp(other)
    }
}

impl Hash for Octets {
    #[inline]
    fn hash<H>(&self, hasher: &mut H)
    where
        H: Hasher,
    {
        let this: &[u8] = self.borrow();
        this.hash(hasher);
    }
}

impl fmt::Debug for Octets {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_tuple("Octets").field(&self.deref()).finish()
    }
}

impl AsRef<[u8]> for Octets {
    #[inline]
    fn as_ref(&self) -> &[u8] {
        self.deref()
    }
}

impl AsMut<[u8]> for Octets {
    #[inline]
    fn as_mut(&mut self) -> &mut [u8] {
        self.deref_mut()
    }
}

impl Borrow<[u8]> for Octets {
    #[inline]
    fn borrow(&self) -> &[u8] {
        self.deref()
    }
}

impl BorrowMut<[u8]> for Octets {
    #[inline]
    fn borrow_mut(&mut self) -> &mut [u8] {
        self.deref_mut()
    }
}

impl Deref for Octets {
    type Target = [u8];

    #[inline]
    fn deref(&self) -> &Self::Target {
        match self.ptr_ {
            None => &[],
            Some(ptr) => unsafe { core::slice::from_raw_parts(ptr, self.len_) },
        }
    }
}

impl DerefMut for Octets {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        match self.ptr_ {
            None => &mut [],
            Some(ptr) => unsafe { core::slice::from_raw_parts_mut(ptr, self.len_) },
        }
    }
}
